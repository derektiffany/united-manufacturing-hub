Table StationStep {
  Id int [PK, increment]
  Name text [not null]
  CreationTime timestamp [not null]

  Note: 'This tables models a single step at a Station.\n\nAt a station that installs an engine to a car, this could be screwing down the engine block to the car chassis'
}

Table StationStepSequence{
  Id int [PK, increment]
  StationId int [not null, ref: < Station.Id]
  StationStepId int [not null, ref: - StationStep.Id]
  SequenceNumber int [not null, note: 'Higher sequence number means, the StationStep is later in the Stations process']

  Note: 'This models, in which sequence the steps at a station are executed\n\nExample: Loading, Processing Step 1, Processing Step 2, Unloading'
  indexes {
      (StationId, StationStepId, SequenceNumber) [unique]
  }
}

Table StationConfiguration{
  Id int [PK, increment]
  StationStepId int [not null, ref: < StationStep.Id]
  MicrostopDurationInSeconds bigint [not null, note: 'TODO: What does this value exactly represent ?']
  IgnoreMicrostopUnderThisDurationInSeconds bigint [not null, note: 'Stops under this seconds will be ignored']
  MinimumRunningTimeInSeconds bigint [not null, note: 'TODO: What does this value exactly represent ?']
  ThresholdForNoShiftsConsideredBreakInSecond bigint [not null, note: 'If no shifts are booked for more then this value, a break is assumed']
  LowSpeedThresholdInPcsPerHour bigint [not null, note: 'If the production speed is lower then this value, a Performance loss is assumed']
  LanguageCode varcharacter(10) [not null, note: 'TODO: lang code len']
  Note: 'This table holds a configuration for an StationStep'
}

Table AvailabilityLossState{
  Id int [PK, increment]
  Value bigint [not null, note: 'Open [available states for assets](https://docs.umh.app/docs/concepts/state/) for more information']
  Name text [not null]
  Note: 'This table holds state ids for availability losses'
}

Table PerformanceLossState{
  Id int [PK, increment]
  Value bigint [not null, note: 'Open [available states for assets](https://docs.umh.app/docs/concepts/state/) for more information']
  Name text [not null]
  Note: 'This table holds state ids for performance losses'
}

Table AvailabilityLossStates {
    StationConfigurationId int [not null, ref: > StationConfiguration.Id]
    AvailabilityLossStateId int [not null, ref: > AvailabilityLossState.Id]

    Note: 'This table is a many-to-many relation table between StationConfigurations and AvailabilityLossState'

    indexes {
        (StationConfigurationId, AvailabilityLossStateId) [PK]
    }
}

Table PerformanceLossStates {
    StationConfigurationId int [not null, ref: > StationConfiguration.Id]
    PerformanceLossStateId int [not null, ref: > PerformanceLossState.Id]

    Note: 'This table is a many-to-many relation table between StationConfigurations and PerformanceLossState'

    indexes {
        (StationConfigurationId, PerformanceLossStateId) [PK]
    }
}

Table Location{
  Id int [PK, increment]
  Name text [not null, unique, note: 'Name of the physical location']
  Note: 'This table holds physical locations of Stations'
}

Table Count {
  Id int [PK, increment]
  StationStepId int [not null, ref: < StationStep.Id]
  Count bigint [not null, note: 'Count of products produced at specific timestamp']
  Timestamp timestamp [not null]
  Note: 'This table shows the count of products produced at a specific timestamp\n\nSELECT create_hypertable("Count", "Timestamp");\n\nCREATE INDEX ON Count (StationStep, Timestamp DESC);'
  indexes {
    (StationStepId, Timestamp) [unique]
  }
}


Table State {
  Id int [PK, increment]
  StationStepId int [not null, ref: < StationStep.Id]
  State bigint [not null, note: 'TODO: Should this reference a AvailabilityLossState or PerformanceLossState ?']
  Timestamp timestamp [not null]
  Note: 'This table shows the state of a StationStep at a specific timestamp\n\nSELECT create_hypertable("State", "Timestamp");\n\nCREATE INDEX ON State (StationStep, Timestamp DESC);'
  indexes {
    (StationStepId, Timestamp) [unique]
  }
}


Table ProcessValueType {
  Id int [PK, increment]
  StationStepId int [not null, ref: < StationStep.Id]
  Name text [not null]
  Note: 'This table is a meta-table to reference a ProcessValue or ProcessValueError by a StationStep'
}

Table ProcessValue {
  Id int [PK, increment]
  ValueTypeId int [not null, ref: > ProcessValueType.Id]
  Value double [not null, note: 'Process value as double']
  Timestamp timestamp [not null]
  Note: 'This table shows the ProcessValue for a StationStep (indirect) at a specific timestamp'
}

Table ProcessValueError {
  Id int [PK, increment]
  ValueTypeId int [not null, ref: > ProcessValueType.Id]
  Error text [not null, note: 'Process value error text']
  Timestamp timestamp [not null]
  Note: 'This table shows the ProcessValueError for a StationStep (indirect) at a specific timestamp'
}

Table Shift {
  Id int [PK, increment]
  ShiftTypeId int [not null, ref: < ShiftType.Id]
  StationId int [not null, ref: < Station.Id]
  BeginTimestamp timestamp [not null]
  EndTimestamp timestamp

  Note: 'This table holds shifts for a Station\n\nIt also references a ShiftType\n\nIt is nullable for EndTimestamp, since we dont know the end of a shift in real-world scenarios\n\nCHECK (BeginTimestamp < EndTimestamp)\n\nEXCLUDE USING gist (StationId WITH =, tstzrange(BeginTimestamp, EndTimestamp) WITH &&)'

  indexes{
    (BeginTimestamp, StationId) [unique]
  }
}

Table ShiftType {
  Id int [PK, increment]
  Name text [not null]
  Note: 'This table holds a shift type\n\nThis could for example be a normal shift, or maintenance'
}


Table Order {
  Id int [PK, increment]
  StationId int [not null, ref: < Station.Id]
  Name text [not null]
  BeginTimestamp timestamp [not null]
  EndTimestamp timestamp
  TargetUnits bigint [not null, note: 'Amount of [Products](#product) to produce']
  Note: 'This table holds an order for a station\n\nIt holds the order name and the target unit count\n\nEndTimestamp is allowed to be null here, since we might not now, how long we want to produce\n\nCHECK (BeginTimestamp < EndTimestamp)\n\nCHECK (TargetUnits > 0)\n\nEXCLUDE USING gist (StationId WITH =, tstzrange(BeginTimestamp, EndTimestamp) WITH &&) WHERE (BeginTimestamp IS NOT NULL AND EndTimestamp IS NOT NULL)'
  indexes{
    (StationId, Id) [unique]
  }
}

Table StationStepProduct {
  Id int [PK, increment]
  StationStepId int [not null, ref: < StationStep.Id]
  ProductTypeNameId int [not null, ref: < ProductTypeName.Id]
  TimePerUnitInSeconds double [not null]
  Note: 'This table holds a product type that will be produced at a station'
}

Table ProductTypeName{
  Id int [PK, increment]
  Name text [not null]
  Note: 'This table holds the name of a product type'
}


Table Product {
  Id int [PK, increment]
  StationStepId int [not null, ref: < StationStep.Id]
  StationProductId int [not null, ref: < StationStepProduct.Id]
  AlternativeId int [not null, note: 'TODO: What does this value exactly represent ?']
  ProductionBegin timestamp [not null, note: 'UNIX timestamp of production begin']
  ProductionEnd timestamp [note: 'UNIX timestamp of production end']
  Status ProductStatus [not null, note: 'References [ProductStatus](#productstatus)']
  ProductFailureId int [ref: < ProductFailure.Id]
  Note: 'This table holds a unique product\n\nEach product references the StationStep it was produced\n\nIt also reference the ProductType by the StationProduct of its Station\n\nCHECK: ProductFailureId can only be set if ProductStatus::Undefined'
}

enum ProductStatus{
  NoScrap   [note: 'means that the product was tested and good or that no testing is needed for this product']
  Scrap     [note: 'means that the product was tested and found to be bad']
  Undefined [note: 'means that the status is not known, this could be a sensor error']
}

Table ProductFailure{
  Id int [PK, increment]
  Value text [not null, note: 'Failure description']
  Note: 'Holds an Value, describing the ProductFailure further'
}

Table ProductInheritance {
  ParentId int [not null, ref: < Product.Id]
  ChildId int [not null, ref: < Product.Id]
  Note: 'This table references the Parent product of another Product (and vise-versa)'
  indexes{
    (ParentId, ChildId) [unique]
    (ParentId)
    (ChildId)
  }
}

Table Station{
  Id int [PK, increment]
  StationGroupId int [not null, ref: < StationGroup.Id]
  LocationId int [not null,ref: < Location.Id]
  Name text [not null]
  CreationTime timestamp [not null]
  Note: 'This table models a Station\n\nExample:\n\nIn a factory line, producing Cars a Station could be installing the engine'
  indexes {
    (Name, LocationId) [unique]
  }
}

Table StationStepRelations {
    StationId int [not null, ref: > Station.Id]
    StationStepId int [not null, ref: > StationStep.Id]
    Note: 'A Station has smaller sub-steps, this is modeled here'
    indexes {
        (StationId, StationStepId) [PK]
    }
}

Table Process{
  Id int [PK, increment]
  Name text [not null]
  CreationTime timestamp [not null]
  Note: 'Each StationStep is part of a process (for example: Install Engine)'
}

Table ProcessGroupRelations {
    ProcessId int [not null, ref: > Process.Id]
    StationStepId int [not null, ref: > StationStep.Id]
    Note: 'Models the relation between Process and StationStep'
    indexes {
        (ProcessId, StationStepId) [PK]
    }
}


Table StationGroup {
  Id int [PK, increment]
  Name text [not null]
  CreationTime timestamp [not null]
  Note: 'This models a group of stations.\n\nFor example a assembly line producing cars'
}


Table RecommendationInstanceTable{
  Id int [PK, increment]
  StationId int [not null, ref: < Station.Id]
  RecommendationTemplateId int [not null, ref: > RecommendationTemplate.Id]
  Timestamp timestamp [not null]
  Note: 'This is an Instance of a recommendation for a specific station'
}




Table RecommendationTemplate{
  Id int [PK, increment]
  Timestamp timestamp [not null]
  Type bigint [not null, note: 'TODO: What exactly will be saved here ?']
  Enabled boolean [not null, note: 'Template is enabled']
  Values text [note: 'TODO: What exactly will be saved here ?']
  DiagnoseTextDE text [note: 'German diagnose text']
  DiagnoseTextEN text [note: 'English diagnose text']
  TextDE text [note: 'German text for operator']
  TextEN text [note: 'English text for operator']
  Note: 'This is a template for a recommendation\n\nThese can be instantiated.\n\nTODO: Which of these keys should be not null\n\nTODO maybe add table for translations'
}


Table StationRecommendationRelations {
    StationId int [not null, ref: > Station.Id]
    RecommendationTemplateId int [not null, ref: > RecommendationTemplate.Id]
    Note: 'This references which RecommendationTemplates are valid for a Station'
    indexes {
        (RecommendationTemplateId, StationId) [PK]
    }
}

Table ProductTagDouble{
  Id int [PK, increment]
  Timestamp timestamp [not null]
  ProductId int [not null, ref: > Product.Id]
  ValueName text [not null]
  Value double [not null, note: 'TODO: What exactly will be saved here ?']
  Note: 'This table models a tag of type double for a unique product'
}


Table ProductTagString{
  Id int [PK, increment]
  Timestamp timestamp [not null]
  ProductId int [not null, ref: > Product.Id]
  ValueName text [not null]
  Value string [not null, note: 'TODO: What exactly will be saved here ?']
  Note: 'This table models a tag of type string for a unique product'
}

Table MigrationVersion{
  Current int [not null, note: 'Has the latest successful migration version']
  LastMigrationTimestamp timestamp [not null, note: 'Timestamp of the latest successful migration']
  Note: 'This table stores the id of the latest migration'
}









